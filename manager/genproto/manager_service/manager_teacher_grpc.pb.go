// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: manager_teacher.proto

package manager_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerTeacherServiceClient is the client API for ManagerTeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerTeacherServiceClient interface {
	Createteacher(ctx context.Context, in *CreateManagerTeacher, opts ...grpc.CallOption) (*ManagerTeacher, error)
	GetteacherByI(ctx context.Context, in *ManagerTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerTeacher, error)
	GetAllteacher(ctx context.Context, in *GetListManagerTeacherRequest, opts ...grpc.CallOption) (*GetListManagerTeacherResponse, error)
	Updateteacher(ctx context.Context, in *UpdateManagerTeacher, opts ...grpc.CallOption) (*ManagerTeacher, error)
	Deleteteacher(ctx context.Context, in *ManagerTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerTeacherPrimaryKey, error)
}

type managerTeacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerTeacherServiceClient(cc grpc.ClientConnInterface) ManagerTeacherServiceClient {
	return &managerTeacherServiceClient{cc}
}

func (c *managerTeacherServiceClient) Createteacher(ctx context.Context, in *CreateManagerTeacher, opts ...grpc.CallOption) (*ManagerTeacher, error) {
	out := new(ManagerTeacher)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerTeacherService/Createteacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerTeacherServiceClient) GetteacherByI(ctx context.Context, in *ManagerTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerTeacher, error) {
	out := new(ManagerTeacher)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerTeacherService/GetteacherByI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerTeacherServiceClient) GetAllteacher(ctx context.Context, in *GetListManagerTeacherRequest, opts ...grpc.CallOption) (*GetListManagerTeacherResponse, error) {
	out := new(GetListManagerTeacherResponse)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerTeacherService/GetAllteacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerTeacherServiceClient) Updateteacher(ctx context.Context, in *UpdateManagerTeacher, opts ...grpc.CallOption) (*ManagerTeacher, error) {
	out := new(ManagerTeacher)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerTeacherService/Updateteacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerTeacherServiceClient) Deleteteacher(ctx context.Context, in *ManagerTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerTeacherPrimaryKey, error) {
	out := new(ManagerTeacherPrimaryKey)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerTeacherService/Deleteteacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerTeacherServiceServer is the server API for ManagerTeacherService service.
// All implementations should embed UnimplementedManagerTeacherServiceServer
// for forward compatibility
type ManagerTeacherServiceServer interface {
	Createteacher(context.Context, *CreateManagerTeacher) (*ManagerTeacher, error)
	GetteacherByI(context.Context, *ManagerTeacherPrimaryKey) (*ManagerTeacher, error)
	GetAllteacher(context.Context, *GetListManagerTeacherRequest) (*GetListManagerTeacherResponse, error)
	Updateteacher(context.Context, *UpdateManagerTeacher) (*ManagerTeacher, error)
	Deleteteacher(context.Context, *ManagerTeacherPrimaryKey) (*ManagerTeacherPrimaryKey, error)
}

// UnimplementedManagerTeacherServiceServer should be embedded to have forward compatible implementations.
type UnimplementedManagerTeacherServiceServer struct {
}

func (UnimplementedManagerTeacherServiceServer) Createteacher(context.Context, *CreateManagerTeacher) (*ManagerTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Createteacher not implemented")
}
func (UnimplementedManagerTeacherServiceServer) GetteacherByI(context.Context, *ManagerTeacherPrimaryKey) (*ManagerTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetteacherByI not implemented")
}
func (UnimplementedManagerTeacherServiceServer) GetAllteacher(context.Context, *GetListManagerTeacherRequest) (*GetListManagerTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllteacher not implemented")
}
func (UnimplementedManagerTeacherServiceServer) Updateteacher(context.Context, *UpdateManagerTeacher) (*ManagerTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updateteacher not implemented")
}
func (UnimplementedManagerTeacherServiceServer) Deleteteacher(context.Context, *ManagerTeacherPrimaryKey) (*ManagerTeacherPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deleteteacher not implemented")
}

// UnsafeManagerTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerTeacherServiceServer will
// result in compilation errors.
type UnsafeManagerTeacherServiceServer interface {
	mustEmbedUnimplementedManagerTeacherServiceServer()
}

func RegisterManagerTeacherServiceServer(s grpc.ServiceRegistrar, srv ManagerTeacherServiceServer) {
	s.RegisterService(&ManagerTeacherService_ServiceDesc, srv)
}

func _ManagerTeacherService_Createteacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerTeacherServiceServer).Createteacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerTeacherService/Createteacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerTeacherServiceServer).Createteacher(ctx, req.(*CreateManagerTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerTeacherService_GetteacherByI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerTeacherServiceServer).GetteacherByI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerTeacherService/GetteacherByI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerTeacherServiceServer).GetteacherByI(ctx, req.(*ManagerTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerTeacherService_GetAllteacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerTeacherServiceServer).GetAllteacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerTeacherService/GetAllteacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerTeacherServiceServer).GetAllteacher(ctx, req.(*GetListManagerTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerTeacherService_Updateteacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerTeacherServiceServer).Updateteacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerTeacherService/Updateteacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerTeacherServiceServer).Updateteacher(ctx, req.(*UpdateManagerTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerTeacherService_Deleteteacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerTeacherServiceServer).Deleteteacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerTeacherService/Deleteteacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerTeacherServiceServer).Deleteteacher(ctx, req.(*ManagerTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerTeacherService_ServiceDesc is the grpc.ServiceDesc for ManagerTeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerTeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager_service.ManagerTeacherService",
	HandlerType: (*ManagerTeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Createteacher",
			Handler:    _ManagerTeacherService_Createteacher_Handler,
		},
		{
			MethodName: "GetteacherByI",
			Handler:    _ManagerTeacherService_GetteacherByI_Handler,
		},
		{
			MethodName: "GetAllteacher",
			Handler:    _ManagerTeacherService_GetAllteacher_Handler,
		},
		{
			MethodName: "Updateteacher",
			Handler:    _ManagerTeacherService_Updateteacher_Handler,
		},
		{
			MethodName: "Deleteteacher",
			Handler:    _ManagerTeacherService_Deleteteacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager_teacher.proto",
}
