// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: manager_suppteacher.proto

package manager_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerSupportTeacherServiceClient is the client API for ManagerSupportTeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerSupportTeacherServiceClient interface {
	Create(ctx context.Context, in *CreateManagerSupportTeacher, opts ...grpc.CallOption) (*ManagerSupportTeacher, error)
	GetByID(ctx context.Context, in *ManagerSupportTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerSupportTeacher, error)
	GetAll(ctx context.Context, in *GetListManagerSupportTeacherRequest, opts ...grpc.CallOption) (*GetListManagerSupportTeacherResponse, error)
	Update(ctx context.Context, in *UpdateManagerSupportTeacher, opts ...grpc.CallOption) (*ManagerSupportTeacher, error)
	Delete(ctx context.Context, in *ManagerSupportTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerSupportTeacherPrimaryKey, error)
}

type managerSupportTeacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerSupportTeacherServiceClient(cc grpc.ClientConnInterface) ManagerSupportTeacherServiceClient {
	return &managerSupportTeacherServiceClient{cc}
}

func (c *managerSupportTeacherServiceClient) Create(ctx context.Context, in *CreateManagerSupportTeacher, opts ...grpc.CallOption) (*ManagerSupportTeacher, error) {
	out := new(ManagerSupportTeacher)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerSupportTeacherService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSupportTeacherServiceClient) GetByID(ctx context.Context, in *ManagerSupportTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerSupportTeacher, error) {
	out := new(ManagerSupportTeacher)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerSupportTeacherService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSupportTeacherServiceClient) GetAll(ctx context.Context, in *GetListManagerSupportTeacherRequest, opts ...grpc.CallOption) (*GetListManagerSupportTeacherResponse, error) {
	out := new(GetListManagerSupportTeacherResponse)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerSupportTeacherService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSupportTeacherServiceClient) Update(ctx context.Context, in *UpdateManagerSupportTeacher, opts ...grpc.CallOption) (*ManagerSupportTeacher, error) {
	out := new(ManagerSupportTeacher)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerSupportTeacherService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerSupportTeacherServiceClient) Delete(ctx context.Context, in *ManagerSupportTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerSupportTeacherPrimaryKey, error) {
	out := new(ManagerSupportTeacherPrimaryKey)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerSupportTeacherService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerSupportTeacherServiceServer is the server API for ManagerSupportTeacherService service.
// All implementations should embed UnimplementedManagerSupportTeacherServiceServer
// for forward compatibility
type ManagerSupportTeacherServiceServer interface {
	Create(context.Context, *CreateManagerSupportTeacher) (*ManagerSupportTeacher, error)
	GetByID(context.Context, *ManagerSupportTeacherPrimaryKey) (*ManagerSupportTeacher, error)
	GetAll(context.Context, *GetListManagerSupportTeacherRequest) (*GetListManagerSupportTeacherResponse, error)
	Update(context.Context, *UpdateManagerSupportTeacher) (*ManagerSupportTeacher, error)
	Delete(context.Context, *ManagerSupportTeacherPrimaryKey) (*ManagerSupportTeacherPrimaryKey, error)
}

// UnimplementedManagerSupportTeacherServiceServer should be embedded to have forward compatible implementations.
type UnimplementedManagerSupportTeacherServiceServer struct {
}

func (UnimplementedManagerSupportTeacherServiceServer) Create(context.Context, *CreateManagerSupportTeacher) (*ManagerSupportTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedManagerSupportTeacherServiceServer) GetByID(context.Context, *ManagerSupportTeacherPrimaryKey) (*ManagerSupportTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedManagerSupportTeacherServiceServer) GetAll(context.Context, *GetListManagerSupportTeacherRequest) (*GetListManagerSupportTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedManagerSupportTeacherServiceServer) Update(context.Context, *UpdateManagerSupportTeacher) (*ManagerSupportTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedManagerSupportTeacherServiceServer) Delete(context.Context, *ManagerSupportTeacherPrimaryKey) (*ManagerSupportTeacherPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeManagerSupportTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerSupportTeacherServiceServer will
// result in compilation errors.
type UnsafeManagerSupportTeacherServiceServer interface {
	mustEmbedUnimplementedManagerSupportTeacherServiceServer()
}

func RegisterManagerSupportTeacherServiceServer(s grpc.ServiceRegistrar, srv ManagerSupportTeacherServiceServer) {
	s.RegisterService(&ManagerSupportTeacherService_ServiceDesc, srv)
}

func _ManagerSupportTeacherService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerSupportTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSupportTeacherServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerSupportTeacherService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSupportTeacherServiceServer).Create(ctx, req.(*CreateManagerSupportTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSupportTeacherService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerSupportTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSupportTeacherServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerSupportTeacherService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSupportTeacherServiceServer).GetByID(ctx, req.(*ManagerSupportTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSupportTeacherService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerSupportTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSupportTeacherServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerSupportTeacherService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSupportTeacherServiceServer).GetAll(ctx, req.(*GetListManagerSupportTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSupportTeacherService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerSupportTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSupportTeacherServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerSupportTeacherService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSupportTeacherServiceServer).Update(ctx, req.(*UpdateManagerSupportTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerSupportTeacherService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerSupportTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerSupportTeacherServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerSupportTeacherService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerSupportTeacherServiceServer).Delete(ctx, req.(*ManagerSupportTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerSupportTeacherService_ServiceDesc is the grpc.ServiceDesc for ManagerSupportTeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerSupportTeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager_service.ManagerSupportTeacherService",
	HandlerType: (*ManagerSupportTeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ManagerSupportTeacherService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ManagerSupportTeacherService_GetByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ManagerSupportTeacherService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ManagerSupportTeacherService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ManagerSupportTeacherService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager_suppteacher.proto",
}
