// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: manager_administration.proto

package manager_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerAdministrationServiceClient is the client API for ManagerAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerAdministrationServiceClient interface {
	Create(ctx context.Context, in *CreateManagerAdministration, opts ...grpc.CallOption) (*ManagerAdministration, error)
	GetByID(ctx context.Context, in *ManagerAdministrationPrimaryKey, opts ...grpc.CallOption) (*ManagerAdministration, error)
	GetAll(ctx context.Context, in *GetListManagerAdministrationRequest, opts ...grpc.CallOption) (*GetListManagerAdministrationResponse, error)
	Update(ctx context.Context, in *UpdateManagerAdministration, opts ...grpc.CallOption) (*ManagerAdministration, error)
	Delete(ctx context.Context, in *ManagerAdministrationPrimaryKey, opts ...grpc.CallOption) (*ManagerAdministrationPrimaryKey, error)
}

type managerAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerAdministrationServiceClient(cc grpc.ClientConnInterface) ManagerAdministrationServiceClient {
	return &managerAdministrationServiceClient{cc}
}

func (c *managerAdministrationServiceClient) Create(ctx context.Context, in *CreateManagerAdministration, opts ...grpc.CallOption) (*ManagerAdministration, error) {
	out := new(ManagerAdministration)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerAdministrationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAdministrationServiceClient) GetByID(ctx context.Context, in *ManagerAdministrationPrimaryKey, opts ...grpc.CallOption) (*ManagerAdministration, error) {
	out := new(ManagerAdministration)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerAdministrationService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAdministrationServiceClient) GetAll(ctx context.Context, in *GetListManagerAdministrationRequest, opts ...grpc.CallOption) (*GetListManagerAdministrationResponse, error) {
	out := new(GetListManagerAdministrationResponse)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerAdministrationService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAdministrationServiceClient) Update(ctx context.Context, in *UpdateManagerAdministration, opts ...grpc.CallOption) (*ManagerAdministration, error) {
	out := new(ManagerAdministration)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerAdministrationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerAdministrationServiceClient) Delete(ctx context.Context, in *ManagerAdministrationPrimaryKey, opts ...grpc.CallOption) (*ManagerAdministrationPrimaryKey, error) {
	out := new(ManagerAdministrationPrimaryKey)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerAdministrationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerAdministrationServiceServer is the server API for ManagerAdministrationService service.
// All implementations should embed UnimplementedManagerAdministrationServiceServer
// for forward compatibility
type ManagerAdministrationServiceServer interface {
	Create(context.Context, *CreateManagerAdministration) (*ManagerAdministration, error)
	GetByID(context.Context, *ManagerAdministrationPrimaryKey) (*ManagerAdministration, error)
	GetAll(context.Context, *GetListManagerAdministrationRequest) (*GetListManagerAdministrationResponse, error)
	Update(context.Context, *UpdateManagerAdministration) (*ManagerAdministration, error)
	Delete(context.Context, *ManagerAdministrationPrimaryKey) (*ManagerAdministrationPrimaryKey, error)
}

// UnimplementedManagerAdministrationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedManagerAdministrationServiceServer struct {
}

func (UnimplementedManagerAdministrationServiceServer) Create(context.Context, *CreateManagerAdministration) (*ManagerAdministration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedManagerAdministrationServiceServer) GetByID(context.Context, *ManagerAdministrationPrimaryKey) (*ManagerAdministration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedManagerAdministrationServiceServer) GetAll(context.Context, *GetListManagerAdministrationRequest) (*GetListManagerAdministrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedManagerAdministrationServiceServer) Update(context.Context, *UpdateManagerAdministration) (*ManagerAdministration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedManagerAdministrationServiceServer) Delete(context.Context, *ManagerAdministrationPrimaryKey) (*ManagerAdministrationPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeManagerAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerAdministrationServiceServer will
// result in compilation errors.
type UnsafeManagerAdministrationServiceServer interface {
	mustEmbedUnimplementedManagerAdministrationServiceServer()
}

func RegisterManagerAdministrationServiceServer(s grpc.ServiceRegistrar, srv ManagerAdministrationServiceServer) {
	s.RegisterService(&ManagerAdministrationService_ServiceDesc, srv)
}

func _ManagerAdministrationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerAdministration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAdministrationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerAdministrationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAdministrationServiceServer).Create(ctx, req.(*CreateManagerAdministration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAdministrationService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerAdministrationPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAdministrationServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerAdministrationService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAdministrationServiceServer).GetByID(ctx, req.(*ManagerAdministrationPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAdministrationService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerAdministrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAdministrationServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerAdministrationService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAdministrationServiceServer).GetAll(ctx, req.(*GetListManagerAdministrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAdministrationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerAdministration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAdministrationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerAdministrationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAdministrationServiceServer).Update(ctx, req.(*UpdateManagerAdministration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerAdministrationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerAdministrationPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerAdministrationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerAdministrationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerAdministrationServiceServer).Delete(ctx, req.(*ManagerAdministrationPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerAdministrationService_ServiceDesc is the grpc.ServiceDesc for ManagerAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager_service.ManagerAdministrationService",
	HandlerType: (*ManagerAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ManagerAdministrationService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ManagerAdministrationService_GetByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ManagerAdministrationService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ManagerAdministrationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ManagerAdministrationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager_administration.proto",
}
