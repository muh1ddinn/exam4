// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: manager_student.proto

package manager_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerStudentServiceClient is the client API for ManagerStudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerStudentServiceClient interface {
	CreateStudent(ctx context.Context, in *CreateManagerStudent, opts ...grpc.CallOption) (*ManagerStudent, error)
	GetStudentByID(ctx context.Context, in *ManagerStudentPrimaryKey, opts ...grpc.CallOption) (*ManagerStudent, error)
	GetAllStudents(ctx context.Context, in *GetListManagerStudentRequest, opts ...grpc.CallOption) (*GetListManagerStudentResponse, error)
	UpdateStudent(ctx context.Context, in *UpdateManagerStudent, opts ...grpc.CallOption) (*ManagerStudent, error)
	DeleteStudent(ctx context.Context, in *ManagerStudentPrimaryKey, opts ...grpc.CallOption) (*ManagerStudentPrimaryKey, error)
}

type managerStudentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerStudentServiceClient(cc grpc.ClientConnInterface) ManagerStudentServiceClient {
	return &managerStudentServiceClient{cc}
}

func (c *managerStudentServiceClient) CreateStudent(ctx context.Context, in *CreateManagerStudent, opts ...grpc.CallOption) (*ManagerStudent, error) {
	out := new(ManagerStudent)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerStudentService/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerStudentServiceClient) GetStudentByID(ctx context.Context, in *ManagerStudentPrimaryKey, opts ...grpc.CallOption) (*ManagerStudent, error) {
	out := new(ManagerStudent)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerStudentService/GetStudentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerStudentServiceClient) GetAllStudents(ctx context.Context, in *GetListManagerStudentRequest, opts ...grpc.CallOption) (*GetListManagerStudentResponse, error) {
	out := new(GetListManagerStudentResponse)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerStudentService/GetAllStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerStudentServiceClient) UpdateStudent(ctx context.Context, in *UpdateManagerStudent, opts ...grpc.CallOption) (*ManagerStudent, error) {
	out := new(ManagerStudent)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerStudentService/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerStudentServiceClient) DeleteStudent(ctx context.Context, in *ManagerStudentPrimaryKey, opts ...grpc.CallOption) (*ManagerStudentPrimaryKey, error) {
	out := new(ManagerStudentPrimaryKey)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerStudentService/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerStudentServiceServer is the server API for ManagerStudentService service.
// All implementations should embed UnimplementedManagerStudentServiceServer
// for forward compatibility
type ManagerStudentServiceServer interface {
	CreateStudent(context.Context, *CreateManagerStudent) (*ManagerStudent, error)
	GetStudentByID(context.Context, *ManagerStudentPrimaryKey) (*ManagerStudent, error)
	GetAllStudents(context.Context, *GetListManagerStudentRequest) (*GetListManagerStudentResponse, error)
	UpdateStudent(context.Context, *UpdateManagerStudent) (*ManagerStudent, error)
	DeleteStudent(context.Context, *ManagerStudentPrimaryKey) (*ManagerStudentPrimaryKey, error)
}

// UnimplementedManagerStudentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedManagerStudentServiceServer struct {
}

func (UnimplementedManagerStudentServiceServer) CreateStudent(context.Context, *CreateManagerStudent) (*ManagerStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedManagerStudentServiceServer) GetStudentByID(context.Context, *ManagerStudentPrimaryKey) (*ManagerStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentByID not implemented")
}
func (UnimplementedManagerStudentServiceServer) GetAllStudents(context.Context, *GetListManagerStudentRequest) (*GetListManagerStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudents not implemented")
}
func (UnimplementedManagerStudentServiceServer) UpdateStudent(context.Context, *UpdateManagerStudent) (*ManagerStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedManagerStudentServiceServer) DeleteStudent(context.Context, *ManagerStudentPrimaryKey) (*ManagerStudentPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}

// UnsafeManagerStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerStudentServiceServer will
// result in compilation errors.
type UnsafeManagerStudentServiceServer interface {
	mustEmbedUnimplementedManagerStudentServiceServer()
}

func RegisterManagerStudentServiceServer(s grpc.ServiceRegistrar, srv ManagerStudentServiceServer) {
	s.RegisterService(&ManagerStudentService_ServiceDesc, srv)
}

func _ManagerStudentService_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerStudentServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerStudentService/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerStudentServiceServer).CreateStudent(ctx, req.(*CreateManagerStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerStudentService_GetStudentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerStudentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerStudentServiceServer).GetStudentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerStudentService/GetStudentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerStudentServiceServer).GetStudentByID(ctx, req.(*ManagerStudentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerStudentService_GetAllStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerStudentServiceServer).GetAllStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerStudentService/GetAllStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerStudentServiceServer).GetAllStudents(ctx, req.(*GetListManagerStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerStudentService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerStudentServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerStudentService/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerStudentServiceServer).UpdateStudent(ctx, req.(*UpdateManagerStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerStudentService_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerStudentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerStudentServiceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerStudentService/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerStudentServiceServer).DeleteStudent(ctx, req.(*ManagerStudentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerStudentService_ServiceDesc is the grpc.ServiceDesc for ManagerStudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerStudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager_service.ManagerStudentService",
	HandlerType: (*ManagerStudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudent",
			Handler:    _ManagerStudentService_CreateStudent_Handler,
		},
		{
			MethodName: "GetStudentByID",
			Handler:    _ManagerStudentService_GetStudentByID_Handler,
		},
		{
			MethodName: "GetAllStudents",
			Handler:    _ManagerStudentService_GetAllStudents_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _ManagerStudentService_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _ManagerStudentService_DeleteStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager_student.proto",
}
