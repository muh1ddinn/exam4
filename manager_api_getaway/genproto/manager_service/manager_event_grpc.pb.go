// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: manager_event.proto

package manager_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerEventServiceClient is the client API for ManagerEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerEventServiceClient interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*Event, error)
	GetEventByID(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*Event, error)
	GetAllEvents(ctx context.Context, in *GetAllEventsRequest, opts ...grpc.CallOption) (*GetAllEventsResponse, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*Event, error)
	DeleteEvent(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*EventID, error)
}

type managerEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerEventServiceClient(cc grpc.ClientConnInterface) ManagerEventServiceClient {
	return &managerEventServiceClient{cc}
}

func (c *managerEventServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerEventService/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerEventServiceClient) GetEventByID(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerEventService/GetEventByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerEventServiceClient) GetAllEvents(ctx context.Context, in *GetAllEventsRequest, opts ...grpc.CallOption) (*GetAllEventsResponse, error) {
	out := new(GetAllEventsResponse)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerEventService/GetAllEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerEventServiceClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerEventService/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerEventServiceClient) DeleteEvent(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*EventID, error) {
	out := new(EventID)
	err := c.cc.Invoke(ctx, "/manager_service.ManagerEventService/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerEventServiceServer is the server API for ManagerEventService service.
// All implementations should embed UnimplementedManagerEventServiceServer
// for forward compatibility
type ManagerEventServiceServer interface {
	CreateEvent(context.Context, *CreateEventRequest) (*Event, error)
	GetEventByID(context.Context, *EventID) (*Event, error)
	GetAllEvents(context.Context, *GetAllEventsRequest) (*GetAllEventsResponse, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*Event, error)
	DeleteEvent(context.Context, *EventID) (*EventID, error)
}

// UnimplementedManagerEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedManagerEventServiceServer struct {
}

func (UnimplementedManagerEventServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedManagerEventServiceServer) GetEventByID(context.Context, *EventID) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByID not implemented")
}
func (UnimplementedManagerEventServiceServer) GetAllEvents(context.Context, *GetAllEventsRequest) (*GetAllEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEvents not implemented")
}
func (UnimplementedManagerEventServiceServer) UpdateEvent(context.Context, *UpdateEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedManagerEventServiceServer) DeleteEvent(context.Context, *EventID) (*EventID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}

// UnsafeManagerEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerEventServiceServer will
// result in compilation errors.
type UnsafeManagerEventServiceServer interface {
	mustEmbedUnimplementedManagerEventServiceServer()
}

func RegisterManagerEventServiceServer(s grpc.ServiceRegistrar, srv ManagerEventServiceServer) {
	s.RegisterService(&ManagerEventService_ServiceDesc, srv)
}

func _ManagerEventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerEventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerEventService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerEventServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerEventService_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerEventServiceServer).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerEventService/GetEventByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerEventServiceServer).GetEventByID(ctx, req.(*EventID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerEventService_GetAllEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerEventServiceServer).GetAllEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerEventService/GetAllEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerEventServiceServer).GetAllEvents(ctx, req.(*GetAllEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerEventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerEventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerEventService/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerEventServiceServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerEventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerEventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_service.ManagerEventService/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerEventServiceServer).DeleteEvent(ctx, req.(*EventID))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerEventService_ServiceDesc is the grpc.ServiceDesc for ManagerEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager_service.ManagerEventService",
	HandlerType: (*ManagerEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _ManagerEventService_CreateEvent_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _ManagerEventService_GetEventByID_Handler,
		},
		{
			MethodName: "GetAllEvents",
			Handler:    _ManagerEventService_GetAllEvents_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _ManagerEventService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _ManagerEventService_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager_event.proto",
}
