// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: superadmin.proto

package superadmin_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerServiceClient interface {
	CreateStudent(ctx context.Context, in *CreateManagerStudent, opts ...grpc.CallOption) (*ManagerStudent, error)
	GetStudentByID(ctx context.Context, in *ManagerStudentPrimaryKey, opts ...grpc.CallOption) (*ManagerStudent, error)
	GetAllStudents(ctx context.Context, in *GetListManagerStudentRequest, opts ...grpc.CallOption) (*GetListManagerStudentResponse, error)
	UpdateStudent(ctx context.Context, in *UpdateManagerStudent, opts ...grpc.CallOption) (*ManagerStudent, error)
	DeleteStudent(ctx context.Context, in *ManagerStudentPrimaryKey, opts ...grpc.CallOption) (*ManagerStudentPrimaryKey, error)
	CreateTeacher(ctx context.Context, in *CreateManagerTeacher, opts ...grpc.CallOption) (*ManagerTeacher, error)
	GetTeacherByID(ctx context.Context, in *ManagerTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerTeacher, error)
	GetAllTeachers(ctx context.Context, in *GetListManagerTeacherRequest, opts ...grpc.CallOption) (*GetListManagerTeacherResponse, error)
	UpdateTeacher(ctx context.Context, in *UpdateManagerTeacher, opts ...grpc.CallOption) (*ManagerTeacher, error)
	DeleteTeacher(ctx context.Context, in *ManagerTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerTeacherPrimaryKey, error)
	CreateSupportTeacher(ctx context.Context, in *CreateManagerSupportTeacher, opts ...grpc.CallOption) (*ManagerSupportTeacher, error)
	GetSupportTeacherByID(ctx context.Context, in *ManagerSupportTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerSupportTeacher, error)
	GetAllSupportTeachers(ctx context.Context, in *GetListManagerSupportTeacherRequest, opts ...grpc.CallOption) (*GetListManagerSupportTeacherResponse, error)
	UpdateSupportTeacher(ctx context.Context, in *UpdateManagerSupportTeacher, opts ...grpc.CallOption) (*ManagerSupportTeacher, error)
	DeleteSupportTeacher(ctx context.Context, in *ManagerSupportTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerSupportTeacherPrimaryKey, error)
	CreateManager(ctx context.Context, in *CreateManagerRequest, opts ...grpc.CallOption) (*Manager, error)
	GetManagerByID(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*Manager, error)
	GetAllManagers(ctx context.Context, in *GetAllManagersRequest, opts ...grpc.CallOption) (*GetAllManagersResponse, error)
	UpdateManager(ctx context.Context, in *UpdateManagerRequest, opts ...grpc.CallOption) (*Manager, error)
	DeleteManager(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*ManagerPrimaryKey, error)
	CreateAdministrator(ctx context.Context, in *CreateManagerAdministrator, opts ...grpc.CallOption) (*ManagerAdministrator, error)
	GetAdministratorByID(ctx context.Context, in *ManagerAdministratorPrimaryKey, opts ...grpc.CallOption) (*ManagerAdministrator, error)
	GetAllAdministrators(ctx context.Context, in *GetListManagerAdministratorRequest, opts ...grpc.CallOption) (*GetListManagerAdministratorResponse, error)
	// rpc UpdateAdministrator (UpdateManagerAdministrator) returns (ManagerAdministrator);
	DeleteAdministrator(ctx context.Context, in *ManagerAdministratorPrimaryKey, opts ...grpc.CallOption) (*ManagerAdministratorPrimaryKey, error)
	ExportToCSV(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Empty, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) CreateStudent(ctx context.Context, in *CreateManagerStudent, opts ...grpc.CallOption) (*ManagerStudent, error) {
	out := new(ManagerStudent)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetStudentByID(ctx context.Context, in *ManagerStudentPrimaryKey, opts ...grpc.CallOption) (*ManagerStudent, error) {
	out := new(ManagerStudent)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetStudentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetAllStudents(ctx context.Context, in *GetListManagerStudentRequest, opts ...grpc.CallOption) (*GetListManagerStudentResponse, error) {
	out := new(GetListManagerStudentResponse)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetAllStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateStudent(ctx context.Context, in *UpdateManagerStudent, opts ...grpc.CallOption) (*ManagerStudent, error) {
	out := new(ManagerStudent)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteStudent(ctx context.Context, in *ManagerStudentPrimaryKey, opts ...grpc.CallOption) (*ManagerStudentPrimaryKey, error) {
	out := new(ManagerStudentPrimaryKey)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTeacher(ctx context.Context, in *CreateManagerTeacher, opts ...grpc.CallOption) (*ManagerTeacher, error) {
	out := new(ManagerTeacher)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/CreateTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetTeacherByID(ctx context.Context, in *ManagerTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerTeacher, error) {
	out := new(ManagerTeacher)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetTeacherByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetAllTeachers(ctx context.Context, in *GetListManagerTeacherRequest, opts ...grpc.CallOption) (*GetListManagerTeacherResponse, error) {
	out := new(GetListManagerTeacherResponse)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetAllTeachers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateTeacher(ctx context.Context, in *UpdateManagerTeacher, opts ...grpc.CallOption) (*ManagerTeacher, error) {
	out := new(ManagerTeacher)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/UpdateTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTeacher(ctx context.Context, in *ManagerTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerTeacherPrimaryKey, error) {
	out := new(ManagerTeacherPrimaryKey)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/DeleteTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateSupportTeacher(ctx context.Context, in *CreateManagerSupportTeacher, opts ...grpc.CallOption) (*ManagerSupportTeacher, error) {
	out := new(ManagerSupportTeacher)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/CreateSupportTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetSupportTeacherByID(ctx context.Context, in *ManagerSupportTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerSupportTeacher, error) {
	out := new(ManagerSupportTeacher)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetSupportTeacherByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetAllSupportTeachers(ctx context.Context, in *GetListManagerSupportTeacherRequest, opts ...grpc.CallOption) (*GetListManagerSupportTeacherResponse, error) {
	out := new(GetListManagerSupportTeacherResponse)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetAllSupportTeachers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateSupportTeacher(ctx context.Context, in *UpdateManagerSupportTeacher, opts ...grpc.CallOption) (*ManagerSupportTeacher, error) {
	out := new(ManagerSupportTeacher)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/UpdateSupportTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteSupportTeacher(ctx context.Context, in *ManagerSupportTeacherPrimaryKey, opts ...grpc.CallOption) (*ManagerSupportTeacherPrimaryKey, error) {
	out := new(ManagerSupportTeacherPrimaryKey)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/DeleteSupportTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateManager(ctx context.Context, in *CreateManagerRequest, opts ...grpc.CallOption) (*Manager, error) {
	out := new(Manager)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/CreateManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetManagerByID(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*Manager, error) {
	out := new(Manager)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetManagerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetAllManagers(ctx context.Context, in *GetAllManagersRequest, opts ...grpc.CallOption) (*GetAllManagersResponse, error) {
	out := new(GetAllManagersResponse)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetAllManagers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateManager(ctx context.Context, in *UpdateManagerRequest, opts ...grpc.CallOption) (*Manager, error) {
	out := new(Manager)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/UpdateManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteManager(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*ManagerPrimaryKey, error) {
	out := new(ManagerPrimaryKey)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/DeleteManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateAdministrator(ctx context.Context, in *CreateManagerAdministrator, opts ...grpc.CallOption) (*ManagerAdministrator, error) {
	out := new(ManagerAdministrator)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/CreateAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetAdministratorByID(ctx context.Context, in *ManagerAdministratorPrimaryKey, opts ...grpc.CallOption) (*ManagerAdministrator, error) {
	out := new(ManagerAdministrator)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetAdministratorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetAllAdministrators(ctx context.Context, in *GetListManagerAdministratorRequest, opts ...grpc.CallOption) (*GetListManagerAdministratorResponse, error) {
	out := new(GetListManagerAdministratorResponse)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/GetAllAdministrators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteAdministrator(ctx context.Context, in *ManagerAdministratorPrimaryKey, opts ...grpc.CallOption) (*ManagerAdministratorPrimaryKey, error) {
	out := new(ManagerAdministratorPrimaryKey)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/DeleteAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ExportToCSV(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/superadmin_service.ManagerService/ExportToCSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
// All implementations should embed UnimplementedManagerServiceServer
// for forward compatibility
type ManagerServiceServer interface {
	CreateStudent(context.Context, *CreateManagerStudent) (*ManagerStudent, error)
	GetStudentByID(context.Context, *ManagerStudentPrimaryKey) (*ManagerStudent, error)
	GetAllStudents(context.Context, *GetListManagerStudentRequest) (*GetListManagerStudentResponse, error)
	UpdateStudent(context.Context, *UpdateManagerStudent) (*ManagerStudent, error)
	DeleteStudent(context.Context, *ManagerStudentPrimaryKey) (*ManagerStudentPrimaryKey, error)
	CreateTeacher(context.Context, *CreateManagerTeacher) (*ManagerTeacher, error)
	GetTeacherByID(context.Context, *ManagerTeacherPrimaryKey) (*ManagerTeacher, error)
	GetAllTeachers(context.Context, *GetListManagerTeacherRequest) (*GetListManagerTeacherResponse, error)
	UpdateTeacher(context.Context, *UpdateManagerTeacher) (*ManagerTeacher, error)
	DeleteTeacher(context.Context, *ManagerTeacherPrimaryKey) (*ManagerTeacherPrimaryKey, error)
	CreateSupportTeacher(context.Context, *CreateManagerSupportTeacher) (*ManagerSupportTeacher, error)
	GetSupportTeacherByID(context.Context, *ManagerSupportTeacherPrimaryKey) (*ManagerSupportTeacher, error)
	GetAllSupportTeachers(context.Context, *GetListManagerSupportTeacherRequest) (*GetListManagerSupportTeacherResponse, error)
	UpdateSupportTeacher(context.Context, *UpdateManagerSupportTeacher) (*ManagerSupportTeacher, error)
	DeleteSupportTeacher(context.Context, *ManagerSupportTeacherPrimaryKey) (*ManagerSupportTeacherPrimaryKey, error)
	CreateManager(context.Context, *CreateManagerRequest) (*Manager, error)
	GetManagerByID(context.Context, *ManagerPrimaryKey) (*Manager, error)
	GetAllManagers(context.Context, *GetAllManagersRequest) (*GetAllManagersResponse, error)
	UpdateManager(context.Context, *UpdateManagerRequest) (*Manager, error)
	DeleteManager(context.Context, *ManagerPrimaryKey) (*ManagerPrimaryKey, error)
	CreateAdministrator(context.Context, *CreateManagerAdministrator) (*ManagerAdministrator, error)
	GetAdministratorByID(context.Context, *ManagerAdministratorPrimaryKey) (*ManagerAdministrator, error)
	GetAllAdministrators(context.Context, *GetListManagerAdministratorRequest) (*GetListManagerAdministratorResponse, error)
	// rpc UpdateAdministrator (UpdateManagerAdministrator) returns (ManagerAdministrator);
	DeleteAdministrator(context.Context, *ManagerAdministratorPrimaryKey) (*ManagerAdministratorPrimaryKey, error)
	ExportToCSV(context.Context, *TableName) (*Empty, error)
}

// UnimplementedManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (UnimplementedManagerServiceServer) CreateStudent(context.Context, *CreateManagerStudent) (*ManagerStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedManagerServiceServer) GetStudentByID(context.Context, *ManagerStudentPrimaryKey) (*ManagerStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentByID not implemented")
}
func (UnimplementedManagerServiceServer) GetAllStudents(context.Context, *GetListManagerStudentRequest) (*GetListManagerStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudents not implemented")
}
func (UnimplementedManagerServiceServer) UpdateStudent(context.Context, *UpdateManagerStudent) (*ManagerStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedManagerServiceServer) DeleteStudent(context.Context, *ManagerStudentPrimaryKey) (*ManagerStudentPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedManagerServiceServer) CreateTeacher(context.Context, *CreateManagerTeacher) (*ManagerTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeacher not implemented")
}
func (UnimplementedManagerServiceServer) GetTeacherByID(context.Context, *ManagerTeacherPrimaryKey) (*ManagerTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherByID not implemented")
}
func (UnimplementedManagerServiceServer) GetAllTeachers(context.Context, *GetListManagerTeacherRequest) (*GetListManagerTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTeachers not implemented")
}
func (UnimplementedManagerServiceServer) UpdateTeacher(context.Context, *UpdateManagerTeacher) (*ManagerTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeacher not implemented")
}
func (UnimplementedManagerServiceServer) DeleteTeacher(context.Context, *ManagerTeacherPrimaryKey) (*ManagerTeacherPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeacher not implemented")
}
func (UnimplementedManagerServiceServer) CreateSupportTeacher(context.Context, *CreateManagerSupportTeacher) (*ManagerSupportTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupportTeacher not implemented")
}
func (UnimplementedManagerServiceServer) GetSupportTeacherByID(context.Context, *ManagerSupportTeacherPrimaryKey) (*ManagerSupportTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportTeacherByID not implemented")
}
func (UnimplementedManagerServiceServer) GetAllSupportTeachers(context.Context, *GetListManagerSupportTeacherRequest) (*GetListManagerSupportTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSupportTeachers not implemented")
}
func (UnimplementedManagerServiceServer) UpdateSupportTeacher(context.Context, *UpdateManagerSupportTeacher) (*ManagerSupportTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupportTeacher not implemented")
}
func (UnimplementedManagerServiceServer) DeleteSupportTeacher(context.Context, *ManagerSupportTeacherPrimaryKey) (*ManagerSupportTeacherPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupportTeacher not implemented")
}
func (UnimplementedManagerServiceServer) CreateManager(context.Context, *CreateManagerRequest) (*Manager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManager not implemented")
}
func (UnimplementedManagerServiceServer) GetManagerByID(context.Context, *ManagerPrimaryKey) (*Manager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagerByID not implemented")
}
func (UnimplementedManagerServiceServer) GetAllManagers(context.Context, *GetAllManagersRequest) (*GetAllManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllManagers not implemented")
}
func (UnimplementedManagerServiceServer) UpdateManager(context.Context, *UpdateManagerRequest) (*Manager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManager not implemented")
}
func (UnimplementedManagerServiceServer) DeleteManager(context.Context, *ManagerPrimaryKey) (*ManagerPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManager not implemented")
}
func (UnimplementedManagerServiceServer) CreateAdministrator(context.Context, *CreateManagerAdministrator) (*ManagerAdministrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdministrator not implemented")
}
func (UnimplementedManagerServiceServer) GetAdministratorByID(context.Context, *ManagerAdministratorPrimaryKey) (*ManagerAdministrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministratorByID not implemented")
}
func (UnimplementedManagerServiceServer) GetAllAdministrators(context.Context, *GetListManagerAdministratorRequest) (*GetListManagerAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAdministrators not implemented")
}
func (UnimplementedManagerServiceServer) DeleteAdministrator(context.Context, *ManagerAdministratorPrimaryKey) (*ManagerAdministratorPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdministrator not implemented")
}
func (UnimplementedManagerServiceServer) ExportToCSV(context.Context, *TableName) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportToCSV not implemented")
}

// UnsafeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServiceServer will
// result in compilation errors.
type UnsafeManagerServiceServer interface {
	mustEmbedUnimplementedManagerServiceServer()
}

func RegisterManagerServiceServer(s grpc.ServiceRegistrar, srv ManagerServiceServer) {
	s.RegisterService(&ManagerService_ServiceDesc, srv)
}

func _ManagerService_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateStudent(ctx, req.(*CreateManagerStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetStudentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerStudentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetStudentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetStudentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetStudentByID(ctx, req.(*ManagerStudentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetAllStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetAllStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetAllStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetAllStudents(ctx, req.(*GetListManagerStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateStudent(ctx, req.(*UpdateManagerStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerStudentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteStudent(ctx, req.(*ManagerStudentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/CreateTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTeacher(ctx, req.(*CreateManagerTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetTeacherByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetTeacherByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetTeacherByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetTeacherByID(ctx, req.(*ManagerTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetAllTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetAllTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetAllTeachers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetAllTeachers(ctx, req.(*GetListManagerTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/UpdateTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateTeacher(ctx, req.(*UpdateManagerTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/DeleteTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTeacher(ctx, req.(*ManagerTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateSupportTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerSupportTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateSupportTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/CreateSupportTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateSupportTeacher(ctx, req.(*CreateManagerSupportTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetSupportTeacherByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerSupportTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetSupportTeacherByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetSupportTeacherByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetSupportTeacherByID(ctx, req.(*ManagerSupportTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetAllSupportTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerSupportTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetAllSupportTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetAllSupportTeachers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetAllSupportTeachers(ctx, req.(*GetListManagerSupportTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateSupportTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerSupportTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateSupportTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/UpdateSupportTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateSupportTeacher(ctx, req.(*UpdateManagerSupportTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteSupportTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerSupportTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteSupportTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/DeleteSupportTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteSupportTeacher(ctx, req.(*ManagerSupportTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/CreateManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateManager(ctx, req.(*CreateManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetManagerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetManagerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetManagerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetManagerByID(ctx, req.(*ManagerPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetAllManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetAllManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetAllManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetAllManagers(ctx, req.(*GetAllManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/UpdateManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateManager(ctx, req.(*UpdateManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/DeleteManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteManager(ctx, req.(*ManagerPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerAdministrator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/CreateAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateAdministrator(ctx, req.(*CreateManagerAdministrator))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetAdministratorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerAdministratorPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetAdministratorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetAdministratorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetAdministratorByID(ctx, req.(*ManagerAdministratorPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetAllAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetAllAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/GetAllAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetAllAdministrators(ctx, req.(*GetListManagerAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerAdministratorPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/DeleteAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteAdministrator(ctx, req.(*ManagerAdministratorPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ExportToCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ExportToCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superadmin_service.ManagerService/ExportToCSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ExportToCSV(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerService_ServiceDesc is the grpc.ServiceDesc for ManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "superadmin_service.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudent",
			Handler:    _ManagerService_CreateStudent_Handler,
		},
		{
			MethodName: "GetStudentByID",
			Handler:    _ManagerService_GetStudentByID_Handler,
		},
		{
			MethodName: "GetAllStudents",
			Handler:    _ManagerService_GetAllStudents_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _ManagerService_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _ManagerService_DeleteStudent_Handler,
		},
		{
			MethodName: "CreateTeacher",
			Handler:    _ManagerService_CreateTeacher_Handler,
		},
		{
			MethodName: "GetTeacherByID",
			Handler:    _ManagerService_GetTeacherByID_Handler,
		},
		{
			MethodName: "GetAllTeachers",
			Handler:    _ManagerService_GetAllTeachers_Handler,
		},
		{
			MethodName: "UpdateTeacher",
			Handler:    _ManagerService_UpdateTeacher_Handler,
		},
		{
			MethodName: "DeleteTeacher",
			Handler:    _ManagerService_DeleteTeacher_Handler,
		},
		{
			MethodName: "CreateSupportTeacher",
			Handler:    _ManagerService_CreateSupportTeacher_Handler,
		},
		{
			MethodName: "GetSupportTeacherByID",
			Handler:    _ManagerService_GetSupportTeacherByID_Handler,
		},
		{
			MethodName: "GetAllSupportTeachers",
			Handler:    _ManagerService_GetAllSupportTeachers_Handler,
		},
		{
			MethodName: "UpdateSupportTeacher",
			Handler:    _ManagerService_UpdateSupportTeacher_Handler,
		},
		{
			MethodName: "DeleteSupportTeacher",
			Handler:    _ManagerService_DeleteSupportTeacher_Handler,
		},
		{
			MethodName: "CreateManager",
			Handler:    _ManagerService_CreateManager_Handler,
		},
		{
			MethodName: "GetManagerByID",
			Handler:    _ManagerService_GetManagerByID_Handler,
		},
		{
			MethodName: "GetAllManagers",
			Handler:    _ManagerService_GetAllManagers_Handler,
		},
		{
			MethodName: "UpdateManager",
			Handler:    _ManagerService_UpdateManager_Handler,
		},
		{
			MethodName: "DeleteManager",
			Handler:    _ManagerService_DeleteManager_Handler,
		},
		{
			MethodName: "CreateAdministrator",
			Handler:    _ManagerService_CreateAdministrator_Handler,
		},
		{
			MethodName: "GetAdministratorByID",
			Handler:    _ManagerService_GetAdministratorByID_Handler,
		},
		{
			MethodName: "GetAllAdministrators",
			Handler:    _ManagerService_GetAllAdministrators_Handler,
		},
		{
			MethodName: "DeleteAdministrator",
			Handler:    _ManagerService_DeleteAdministrator_Handler,
		},
		{
			MethodName: "ExportToCSV",
			Handler:    _ManagerService_ExportToCSV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "superadmin.proto",
}
